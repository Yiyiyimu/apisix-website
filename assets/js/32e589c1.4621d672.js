(window.webpackJsonp=window.webpackJsonp||[]).push([[40],{108:function(e,t,a){"use strict";a.r(t),a.d(t,"frontMatter",(function(){return o})),a.d(t,"metadata",(function(){return c})),a.d(t,"toc",(function(){return s})),a.d(t,"default",(function(){return p}));var n=a(3),r=a(7),i=(a(0),a(255)),o={title:"Getting Started"},c={unversionedId:"getting-started",id:"getting-started",isDocsHomePage:!1,title:"Getting Started",description:"\x3c!--",source:"@site/docs/apisix/getting-started.md",slug:"/getting-started",permalink:"/docs/apisix/getting-started",editUrl:"https://github.com/apache/apisix/edit/master/docs/en/latest/getting-started.md",version:"current",sidebar:"docs",previous:{title:"Debug Mode",permalink:"/docs/apisix/architecture-design/debug-mode"},next:{title:"How to build Apache APISIX",permalink:"/docs/apisix/how-to-build"}},s=[{value:"Getting Started",id:"getting-started",children:[]},{value:"Prerequisites",id:"prerequisites",children:[]},{value:"Step 1: Install Apache APISIX",id:"step-1-install-apache-apisix",children:[]},{value:"Step 2: Create a Route",id:"step-2-create-a-route",children:[{value:"Before we continue",id:"before-we-continue",children:[]},{value:"Create an Upstream",id:"create-an-upstream",children:[]},{value:"Bind Route with Upstream",id:"bind-route-with-upstream",children:[]},{value:"Verification",id:"verification",children:[]}]},{value:"Advanced",id:"advanced",children:[{value:"Authentication",id:"authentication",children:[]},{value:"Prefix in Route",id:"prefix-in-route",children:[]},{value:"APISIX Dashboard",id:"apisix-dashboard",children:[]},{value:"Troubleshooting",id:"troubleshooting",children:[]}]}],l={toc:s};function p(e){var t=e.components,a=Object(r.a)(e,["components"]);return Object(i.b)("wrapper",Object(n.a)({},l,a,{components:t,mdxType:"MDXLayout"}),Object(i.b)("h2",{id:"getting-started"},"Getting Started"),Object(i.b)("p",null,"This guide aims to get started with Apache APISIX, we will configure the service that will route to a public API, secured by an API key."),Object(i.b)("p",null,"Also, we will take the following ",Object(i.b)("inlineCode",{parentName:"p"},"echo")," endpoint as an example, it will return parameters we passed."),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Request")),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-bash"},'$ curl --location --request GET "http://httpbin.org/get?foo1=bar1&foo2=bar2"\n')),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Response")),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-json"},'{\n  "args": {\n    "foo1": "bar1",\n    "foo2": "bar2"\n  },\n  "headers": {\n    "Accept": "text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9",\n    "Accept-Encoding": "gzip, deflate, br",\n    "Accept-Language": "en,zh-CN;q=0.9,zh;q=0.8",\n    "Cache-Control": "max-age=0",\n    "Host": "httpbin.org",\n    "Sec-Ch-Ua": "\\"Google Chrome\\";v=\\"89\\", \\"Chromium\\";v=\\"89\\", \\";Not A Brand\\";v=\\"99\\"",\n    "Sec-Ch-Ua-Mobile": "?0",\n    "Sec-Fetch-Dest": "document",\n    "Sec-Fetch-Mode": "navigate",\n    "Sec-Fetch-Site": "none",\n    "Sec-Fetch-User": "?1",\n    "Upgrade-Insecure-Requests": "1",\n    "User-Agent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 11_2_2) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/89.0.4389.90 Safari/537.36",\n    "X-Amzn-Trace-Id": "Root=1-606276ab-2b451d4b36057c186d666351"\n  },\n  "origin": "58.152.81.42",\n  "url": "http://httpbin.org/get?foo1=bar1&foo2=bar2"\n}\n')),Object(i.b)("p",null,"Let's deconstruct the above Request URL."),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},"Protocol: HTTP"),Object(i.b)("li",{parentName:"ul"},"Port: 80"),Object(i.b)("li",{parentName:"ul"},"Host: ",Object(i.b)("inlineCode",{parentName:"li"},"httpbin.org")),Object(i.b)("li",{parentName:"ul"},"URI/Path: ",Object(i.b)("inlineCode",{parentName:"li"},"/get")),Object(i.b)("li",{parentName:"ul"},"Query Parameters: foo1, foo2")),Object(i.b)("h2",{id:"prerequisites"},"Prerequisites"),Object(i.b)("blockquote",null,Object(i.b)("p",{parentName:"blockquote"},"If you have installed the Apache APISIX, feel free and skip to ",Object(i.b)("a",{parentName:"p",href:"#step-2-create-a-route"},"Step 2")," please.")),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},"This guide uses ",Object(i.b)("a",{parentName:"li",href:"https://www.docker.com/"},"Docker")," and ",Object(i.b)("a",{parentName:"li",href:"https://docs.docker.com/compose/"},"Docker Compose")," to setup Apache APISIX."),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"curl"),": This guide uses the ",Object(i.b)("a",{parentName:"li",href:"https://curl.se/docs/manpage.html"},"curl")," command for API testing, but you can also use any other tools, e.g ",Object(i.b)("a",{parentName:"li",href:"https://www.postman.com/"},"Postman"),".")),Object(i.b)("p",null,"I know you're waiting for this moment for a while, let's go!"),Object(i.b)("h2",{id:"step-1-install-apache-apisix"},"Step 1: Install Apache APISIX"),Object(i.b)("p",null,"Thanks to Docker, we could launch the Apache APISIX and enable the ",Object(i.b)("a",{parentName:"p",href:"/docs/apisix/admin-api"},"Admin API")," by executing the following commands:"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-bash"},"$ git clone https://github.com/apache/apisix-docker.git\n$ cd apisix-docker/example\n$ docker-compose -p docker-apisix up -d\n")),Object(i.b)("p",null,"It will take some time to download all needed files, and this depends on your network, please be patient. Once this step gets done, we could ",Object(i.b)("inlineCode",{parentName:"p"},"curl")," our Admin API to tell if the Apache APISIX launchs successfully."),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-bash"},"# NOTE: Please curl on the machine which you run above Docker commands.\n$ curl \"http://127.0.0.1:9080/apisix/admin/services/\" -H 'X-API-KEY: edd1c9f034335f136f87ad84b625c8f1'\n")),Object(i.b)("p",null,"We expect the following data to be returned:"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-json"},'{\n  "node": {\n    "createdIndex": 6,\n    "modifiedIndex": 6,\n    "key": "/apisix/services",\n    "dir": true\n  },\n  "action": "get"\n}\n')),Object(i.b)("h2",{id:"step-2-create-a-route"},"Step 2: Create a Route"),Object(i.b)("p",null,"Congratulations! You have a running Apache APISIX instance now! Let's create a Route next!"),Object(i.b)("h3",{id:"before-we-continue"},"Before we continue"),Object(i.b)("p",null,"Do you know? Apache APISIX provides the powerful ",Object(i.b)("a",{parentName:"p",href:"/docs/apisix/admin-api"},"Admin API")," and a ",Object(i.b)("a",{parentName:"p",href:"https://github.com/apache/apisix-dashboard"},"Dashboard")," for us to use, but we will use Admin API here in this guide. Let's go!"),Object(i.b)("p",null,"We could create one ",Object(i.b)("a",{parentName:"p",href:"/docs/apisix/architecture-design/route"},"Route")," and target it to our backend services (We call them ",Object(i.b)("a",{parentName:"p",href:"/docs/apisix/architecture-design/upstream"},"Upstream")," usually), when one ",Object(i.b)("inlineCode",{parentName:"p"},"Request")," reaches Apache APISIX, Apache APISIX will see where this Request should go."),Object(i.b)("p",null,"Then how does Apache APISIX know this? That's because we have a list of rules configured with Route. Here is a sample Route data:"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-json"},'{\n  "methods": ["GET"],\n  "host": "example.com",\n  "uri": "/services/users/*",\n  "upstream": {\n    "type": "roundrobin",\n    "nodes": {\n      "httpbin.org:80": 1\n    }\n  }\n}\n')),Object(i.b)("p",null,"This Route means all inbound requests will be forwarded to the ",Object(i.b)("inlineCode",{parentName:"p"},"httpbin.org:80")," Upstream when they meets ",Object(i.b)("strong",{parentName:"p"},"ALL")," these rules(matched requests):"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},"Request's HTTP method is ",Object(i.b)("inlineCode",{parentName:"li"},"GET"),";"),Object(i.b)("li",{parentName:"ul"},"Request has ",Object(i.b)("inlineCode",{parentName:"li"},"Host")," Header, and its value is ",Object(i.b)("inlineCode",{parentName:"li"},"example.com"),";"),Object(i.b)("li",{parentName:"ul"},"Request's path matches ",Object(i.b)("inlineCode",{parentName:"li"},"/services/users/*"),", ",Object(i.b)("inlineCode",{parentName:"li"},"*")," means all subpaths, like ",Object(i.b)("inlineCode",{parentName:"li"},"/services/users/getAll?limit=10"),".")),Object(i.b)("p",null,"After this Route is created, we could use Apache APISIX's address to access our backend services(Upstream actually):"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-bash"},'$ curl -i -X GET "http://{APISIX_BASE_URL}/services/users/getAll?limit=10" -H "Host: example.com"\n')),Object(i.b)("p",null,"This will be forward to ",Object(i.b)("inlineCode",{parentName:"p"},"http://httpbin.org:80/getAll?limit=10")," by Apache APISIX."),Object(i.b)("h3",{id:"create-an-upstream"},"Create an Upstream"),Object(i.b)("p",null,"After reading the above section, we know we have to set the ",Object(i.b)("inlineCode",{parentName:"p"},"Upstream")," for ",Object(i.b)("inlineCode",{parentName:"p"},"Route"),". Just executing the following command to create one:"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-bash"},'$ curl "http://127.0.0.1:9080/apisix/admin/upstreams/50" -H \'X-API-KEY: edd1c9f034335f136f87ad84b625c8f1\' -X PUT -d \'\n{\n  "type": "roundrobin",\n  "nodes": {\n    "httpbin.org:80": 1\n  }\n}\'\n')),Object(i.b)("p",null,"We use ",Object(i.b)("inlineCode",{parentName:"p"},"roundrobin")," as our load balancer mechanism, and set ",Object(i.b)("inlineCode",{parentName:"p"},"httpbin.org:80")," as our Upstream target(backend server), and its ID is ",Object(i.b)("inlineCode",{parentName:"p"},"50"),". For more fields, please refer to ",Object(i.b)("a",{parentName:"p",href:"/docs/apisix/admin-api"},"Admin API"),"."),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"NOTE:")," ",Object(i.b)("inlineCode",{parentName:"p"},"Create an Upstream")," is not required actually, because we could use ",Object(i.b)("a",{parentName:"p",href:"/docs/apisix/architecture-design/plugin"},"Plugin")," to interceptor requests then response directly, but let's assume we need to set at least one ",Object(i.b)("inlineCode",{parentName:"p"},"Upstream")," in this guide."),Object(i.b)("h3",{id:"bind-route-with-upstream"},"Bind Route with Upstream"),Object(i.b)("p",null,"We just created an Upstream(Reference to our backend services), let's bind one Route with it!"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-bash"},'$ curl "http://127.0.0.1:9080/apisix/admin/routes/5" -H \'X-API-KEY: edd1c9f034335f136f87ad84b625c8f1\' -X PUT -d \'\n{\n  "uri": "/get",\n  "host": "httpbin.org",\n  "upstream_id": "50"\n}\'\n')),Object(i.b)("p",null,"That's it!"),Object(i.b)("h3",{id:"verification"},"Verification"),Object(i.b)("p",null,"Congratulations once more! We have created one ",Object(i.b)("inlineCode",{parentName:"p"},"Route")," and ",Object(i.b)("inlineCode",{parentName:"p"},"Upstream"),", also we bind them together. Now let's call Apache APISIX to test the ",Object(i.b)("inlineCode",{parentName:"p"},"created route"),"."),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-bash"},'$ curl -i -X GET "http://127.0.0.1:9080/get?foo1=bar1&foo2=bar2" -H "Host: httpbin.org"\n')),Object(i.b)("p",null,"Wow! It will return data from our ",Object(i.b)("inlineCode",{parentName:"p"},"Upstream"),"(",Object(i.b)("inlineCode",{parentName:"p"},"httpbin.org")," actually), it works as expected!"),Object(i.b)("h2",{id:"advanced"},"Advanced"),Object(i.b)("h3",{id:"authentication"},"Authentication"),Object(i.b)("p",null,"Let's do some interesting things, due to ",Object(i.b)("strong",{parentName:"p"},"anyone")," could access our public ",Object(i.b)("inlineCode",{parentName:"p"},"Route")," created in the Step2, we would like only ",Object(i.b)("inlineCode",{parentName:"p"},"John")," could access it. Let's use ",Object(i.b)("a",{parentName:"p",href:"/docs/apisix/architecture-design/consumer"},"Consumer")," and ",Object(i.b)("a",{parentName:"p",href:"/docs/apisix/architecture-design/plugin"},"Plugin")," to implement this protection."),Object(i.b)("p",null,"First, let's create the ",Object(i.b)("a",{parentName:"p",href:"/docs/apisix/architecture-design/consumer"},"consumer")," ",Object(i.b)("inlineCode",{parentName:"p"},"John")," with ",Object(i.b)("a",{parentName:"p",href:"/docs/apisix/plugins/key-auth"},"key-auth")," plugin, we need to provide a specified secret key:"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-bash"},'$ curl http://127.0.0.1:9080/apisix/admin/consumers -H \'X-API-KEY: edd1c9f034335f136f87ad84b625c8f1\' -X PUT -d \'\n{\n  "username": "john",\n  "plugins": {\n    "key-auth": {\n      "key": "superSecretAPIKey"\n    }\n  }\n}\'\n')),Object(i.b)("p",null,"Next, let's bind our ",Object(i.b)("inlineCode",{parentName:"p"},"Consumer(John)")," to that ",Object(i.b)("inlineCode",{parentName:"p"},"Route"),", we only need to ",Object(i.b)("strong",{parentName:"p"},"Enable")," the ",Object(i.b)("a",{parentName:"p",href:"/docs/apisix/plugins/key-auth"},"key-auth")," plugin for that ",Object(i.b)("inlineCode",{parentName:"p"},"Route"),":"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-bash"},'curl http://127.0.0.1:9080/apisix/admin/routes/5 -H \'X-API-KEY: edd1c9f034335f136f87ad84b625c8f1\' -X PUT -d \'\n{\n  "uri": "/get",\n  "host": "httpbin.org",\n  "plugins": {\n    "key-auth": {}\n  },\n  "upstream_id": 50\n}\'\n')),Object(i.b)("p",null,"Ok, when we access the ",Object(i.b)("inlineCode",{parentName:"p"},"Route")," created in Step2 from now on, an ",Object(i.b)("strong",{parentName:"p"},"Unauthorized Error")," will occur. Let's see how to access that ",Object(i.b)("inlineCode",{parentName:"p"},"Route"),":"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-bash"},"$ curl -i -X GET http://127.0.0.1:9080/get -H \"Host: httpbin.org\" -H 'apikey: superSecretAPIKey'\n")),Object(i.b)("p",null,"Ya, just added an ",Object(i.b)("inlineCode",{parentName:"p"},"Header")," called ",Object(i.b)("inlineCode",{parentName:"p"},"apikey")," with correct key! It's so easy to protect any ",Object(i.b)("inlineCode",{parentName:"p"},"Routes"),", right?"),Object(i.b)("h3",{id:"prefix-in-route"},"Prefix in Route"),Object(i.b)("p",null,"Now lets say you want to add a prefix (eg: samplePrefix) to the route and do not want to use the ",Object(i.b)("inlineCode",{parentName:"p"},"host")," header then you can use\nthe proxy-rewrite plugin to do it."),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-bash"},'curl http://127.0.0.1:9080/apisix/admin/routes/5 -H \'X-API-KEY: edd1c9f034335f136f87ad84b625c8f1\' -X PUT -d \'\n{\n  "uri": "/samplePrefix/get",\n  "plugins": {\n    "proxy-rewrite": {\n      "regex_uri": ["^/samplePrefix/get(.*)", "/get$1"]\n    },\n    "key-auth": {}\n  },\n  "upstream_id": 50\n}\'\n')),Object(i.b)("p",null,"Now you can invoke the route with the following command:"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-bash"},"$ curl -i -X GET 'http://127.0.0.1:9080/samplePrefix/get?param1=foo&param2=bar' -H 'apikey: superSecretAPIKey'\n")),Object(i.b)("h3",{id:"apisix-dashboard"},"APISIX Dashboard"),Object(i.b)("p",null,"Apache APISIX provides a ",Object(i.b)("a",{parentName:"p",href:"https://github.com/apache/apisix"},"Dashboard")," to let us operate Apache APISIX more easier."),Object(i.b)("p",null,Object(i.b)("img",{parentName:"p",src:"https://raw.githubusercontent.com/apache/apisix/master/docs/assets/images/dashboard.jpeg",alt:"Dashboard"})),Object(i.b)("h3",{id:"troubleshooting"},"Troubleshooting"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},"Make sure all required ports (",Object(i.b)("strong",{parentName:"li"},"9080/9443/2379 by default"),") are not being used by other systems/processes.")),Object(i.b)("p",null,"The following command will kill the process which is listening on a specific port (in unix based systems)."),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-bash"},"$ sudo fuser -k 9443/tcp\n")),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},"If the docker container is restarting/failing continuously, just access to the container and observe the logs to find out what happened.")),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-bash"},"$ docker logs -f --tail container_id\n")))}p.isMDXComponent=!0},255:function(e,t,a){"use strict";a.d(t,"a",(function(){return b})),a.d(t,"b",(function(){return h}));var n=a(0),r=a.n(n);function i(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function o(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function c(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?o(Object(a),!0).forEach((function(t){i(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):o(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function s(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},i=Object.keys(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var l=r.a.createContext({}),p=function(e){var t=r.a.useContext(l),a=t;return e&&(a="function"==typeof e?e(t):c(c({},t),e)),a},b=function(e){var t=p(e.components);return r.a.createElement(l.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.a.createElement(r.a.Fragment,{},t)}},d=r.a.forwardRef((function(e,t){var a=e.components,n=e.mdxType,i=e.originalType,o=e.parentName,l=s(e,["components","mdxType","originalType","parentName"]),b=p(a),d=n,h=b["".concat(o,".").concat(d)]||b[d]||u[d]||i;return a?r.a.createElement(h,c(c({ref:t},l),{},{components:a})):r.a.createElement(h,c({ref:t},l))}));function h(e,t){var a=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var i=a.length,o=new Array(i);o[0]=d;var c={};for(var s in t)hasOwnProperty.call(t,s)&&(c[s]=t[s]);c.originalType=e,c.mdxType="string"==typeof e?e:n,o[1]=c;for(var l=2;l<i;l++)o[l]=a[l];return r.a.createElement.apply(null,o)}return r.a.createElement.apply(null,a)}d.displayName="MDXCreateElement"}}]);